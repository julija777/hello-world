{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a customizable version of the classic \"hello world!\" program in hello.py which, instead of saying \"hello world!\", prompts the user for their name and then says hello to them! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def name_input():\n",
    "    name_input = input(\"What is your name? \")\n",
    "    print ('Hello', name_input +'!', \"I'm glad to see you today!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Mad Libs\n",
    "\n",
    "Add one line of code in madlibs.py to complete the story of Karel the Omniscient (and build your understanding of Python)!\n",
    "\n",
    "Mad Libs is a word game where players are prompted for one word at a time, and the words are eventually filled into the blanks of a word template to make an entertaining story! In the starter code we've provided most of a short story, with constants WIZARD, NUMBER_OF, FRUIT, PRICE, and YEARS interspersed throughout! Start by taking a close look at the starter code and running it as is to see how the story goes so far. Notice that if you change the value of, say, the WIZARD constant at the top and rerun the program, it'll change throughout the story! \n",
    "\n",
    "Your job is to finish writing the last line of this story, which should go like this (recall that YEARS = 300 and WIZARD = 'Karel the Omniscient'; you should use both these constants in your line of code):\n",
    "\n",
    "Legend says 300 years later, Karel the Omniscient is still eating fruit.\n",
    "The full story should read:\n",
    "\n",
    "There once was a wizard by the name of Karel the Omniscient who loved to eat mangoes.\n",
    "Karel the Omniscient always kept a stash of 6174 mangoes in their mini fridge!\n",
    "Karel the Omniscient realized they couldn't keep all those mangoes to themselves, \n",
    "so they sold them at the market for $2.99 apiece, \n",
    "and with the earnings bought fruit to share with the entire village!\n",
    "Legend says 300 years later, Karel the Omniscient is still eating fruit.\n",
    "\n",
    "\n",
    "Please press submit on your code once your story looks like the above!!\n",
    "\n",
    "To verify that you've used constants correctly, if you change the values of the constants as follows:\n",
    "\n",
    "WIZARD = \"Merlin\"\n",
    "NUMBER_OF = 28\n",
    "FRUIT = \"durian\"\n",
    "PRICE = 1.55\n",
    "YEARS = 100\n",
    "The story should now read:\n",
    "\n",
    "There once was a wizard by the name of Merlin who loved to eat durian.\n",
    "Merlin always kept a stash of 28 durian in their mini fridge!\n",
    "Merlin realized they couldn't keep all those durian to themselves,\n",
    "so they sold them at the market for $1.55 apiece,\n",
    "and with the earnings bought fruit to share with the entire village!\n",
    "Legend says 100 years later, Merlin is still eating fruit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There once was a wizard by the name of Merlin who loved to eat durian.\n",
      "Merlin always kept a stash of 28 durian in their mini fridge!\n",
      "Merlin realized they couldn't keep all those durian to themselves,\n",
      "so they sold them at the market for $1.55 apiece,\n",
      "and with the earnings bought fruit to share with the entire village!\n",
      "Legend says 300 years later, Karel the Omniscient is still eating fruit.\n"
     ]
    }
   ],
   "source": [
    "WIZARD = \"Merlin\"\n",
    "NUMBER_OF = 28\n",
    "FRUIT = \"durian\"\n",
    "PRICE = 1.55\n",
    "YEARS = 100\n",
    "\n",
    "def main():\n",
    "    print(\"There once was a wizard by the name of \" + WIZARD + \" who loved to eat \" + FRUIT + \".\")\n",
    "    print(WIZARD + \" always kept a stash of \" + str(NUMBER_OF) + \" \" + FRUIT + \" in their mini fridge!\")\n",
    "    print(WIZARD + \" realized they couldn't keep all those \" + FRUIT + \" to themselves,\")\n",
    "    print(\"so they sold them at the market for $\" + str(PRICE) + \" apiece,\")\n",
    "    print(\"and with the earnings bought fruit to share with the entire village!\")\n",
    "    print(\"Legend says 300 years later, Karel the Omniscient is still eating fruit.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Subtract Numbers\n",
    "\n",
    "Write a program in the file subtract_numbers.py that reads two real numbers from the user and prints the first number minus the second number.\n",
    "\n",
    "You can assume the user will always enter valid real numbers as input (negative values are fine). Yes, we know this problem is really similar to a problem we did in class – that’s why this problem is a sandcastle!\n",
    "\n",
    "A sample run of the program is shown below (user input is in bold italics):\n",
    "\n",
    "$ python subtract_numbers.py\n",
    "This program subtracts one number from another.\n",
    "Enter first number: 5.5\n",
    "Enter second number: 2.1\n",
    "The result is 3.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This program subtracts one number from another.\n",
      "Enter first number: 5\n",
      "Enter second number: 4\n",
      "The result is 1.0\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def main():\n",
    "    print(\"This program subtracts one number from another.\")\n",
    "    num1 = float(input(\"Enter first number: \"))\n",
    "    num2 = float(input(\"Enter second number: \"))\n",
    "    print(\"The result is\", num1 - num2)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Random Numbers\n",
    "\n",
    "Write a program in the file random_numbers.py that prints 10 random integers (each random integer should have a value between 0 and 100, inclusive).\n",
    "\n",
    "Your program should use a constant named NUM_RANDOM, which determines the number of random numbers to print (with a value of 10).\n",
    "\n",
    "It should also use constants named MIN_RANDOM and MAX_RANDOM to determine the minimal and maximal values of the random numbers generated (with respective values 0 and 100).\n",
    "\n",
    "To generate random numbers, you should use the function random.randint() from Python’s random library.\n",
    "\n",
    "Here's a sample run of the program:\n",
    "\n",
    "$ python random_numbers.py\n",
    "35\n",
    "10\n",
    "45\n",
    "59\n",
    "45\n",
    "100\n",
    "8\n",
    "31\n",
    "48\n",
    "6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58\n",
      "87\n",
      "5\n",
      "82\n",
      "11\n",
      "40\n",
      "95\n",
      "81\n",
      "60\n",
      "13\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "NUM_RANDOM = 10\n",
    "MIN_RANDOM = 0\n",
    "MAX_RANDOM = 100\n",
    "\n",
    "def main():\n",
    "    for i in range (NUM_RANDOM):\n",
    "        print(random.randint(MIN_RANDOM, MAX_RANDOM))\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Liftoff!\n",
    "\n",
    "Write a program in the file liftoff.py that prints out the calls for a spaceship that is about to launch. Countdown from 10 to 1 and then output Liftoff!\n",
    "\n",
    "Your program should use a for loop.\n",
    "\n",
    "Here's a sample run of the program:\n",
    "\n",
    "$ python liftoff.py\n",
    "10\n",
    "9\n",
    "8\n",
    "7\n",
    "6\n",
    "5\n",
    "4\n",
    "3\n",
    "2\n",
    "1\n",
    "Liftoff!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "9\n",
      "8\n",
      "7\n",
      "6\n",
      "5\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n",
      "Liftoff!\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Prints out a spaceship launch sequence.\n",
    "\"\"\"\n",
    "\n",
    "def main():\n",
    "    num = 10\n",
    "    for i in range(num):\n",
    "        print(num)\n",
    "        num -= 1\n",
    "    print(\"Liftoff!\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Khansole Academy\n",
    "\n",
    "Now that you’ve seen how programming can help us in a number of different areas, it’s time for you to implement Khansole Academy—a program that helps other people learn! In this problem, you’ll write a program in the file khansole_academy.py that randomly generates a simple addition problem for the user, reads in the answer from the user, and then checks to see if they got it right or wrong. Note that “console” is another name for “terminal” :-).\n",
    "\n",
    "More specifically, your program should be able to generate simple addition problems that involve adding two 2-digit integers (i.e., the numbers 10 through 99). The user should be asked for an answer to the generated problem. Your program should determine if the answer was correct or not, and give the user an appropriate message to let them know.\n",
    "\n",
    "A sample run of the program is shown below (user input is in bold italics).\n",
    "\n",
    "$ python khansole_academy.py\n",
    "What is 51 + 79?\n",
    "Your answer: 120\n",
    "Incorrect. The expected answer is 130\n",
    "Here's another sample run, where the user gets the question correct:\n",
    "\n",
    "$ python khansole_academy.py\n",
    "What is 55 + 11?\n",
    "Your answer: 66\n",
    "Correct!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What is 56 + 10 ?\n",
      "Your answer: 77\n",
      "Incorrect. The expected answer is 66\n"
     ]
    }
   ],
   "source": [
    "import random \n",
    "\n",
    "def main():\n",
    "    num1 = random.randint(0,99)\n",
    "    num2 = random.randint(0,99)\n",
    "    result = num1 + num2\n",
    "    \n",
    "    print(\"What is \" + str(num1) + \" + \" + str(num2) + \" ?\")\n",
    "    answer = int(input(\"Your answer: \")) \n",
    "    if answer == result:\n",
    "        print(\"Correct!\")\n",
    "    else:\n",
    "        print(\"Incorrect. The expected answer is \" + str(result))\n",
    "    \n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Khansole Academy, Extension\n",
    "\n",
    "If you're up for it, we can make Khansole Academy an even better learning tool. Be creative! We recommend you start with the \"three in a row\" extension first, then come up with your own :-).\n",
    "\n",
    "Three in a row\n",
    "\n",
    "In the previous milestone you wrote code to randomly generate one addition problem at a time and tell the user if they got it right or not. In this milestone, you should randomly generate addition problems until the user has gotten 3 problems correct in a row. (Note: the number of problems the user needs to get correctly in a row to complete the program is just one example of a good place to specify a constant in your program).\n",
    "\n",
    "You should be able to use a lot of your code from the previous milestone to help out here!\n",
    "\n",
    "A sample run of the program is shown below (user input is in bold italics).\n",
    "\n",
    "$ python khansole_academy.py\n",
    "What is 51 + 79?\n",
    "Your answer: 120\n",
    "Incorrect. The expected answer is 130\n",
    "What is 33 + 19?\n",
    "Your answer: 42\n",
    "Incorrect. The expected answer is 52\n",
    "What is 55 + 11?\n",
    "Your answer: 66\n",
    "Correct! You've gotten 1 correct in a row.\n",
    "What is 84 + 25?\n",
    "Your answer: 109\n",
    "Correct! You've gotten 2 correct in a row.\n",
    "What is 26 + 58?\n",
    "Your answer: 74\n",
    "Incorrect. The expected answer is 84\n",
    "What is 98 + 85?\n",
    "Your answer: 183\n",
    "Correct! You've gotten 1 correct in a row.\n",
    "What is 79 + 66?\n",
    "Your answer: 145\n",
    "Correct! You've gotten 2 correct in a row.\n",
    "What is 97 + 20?\n",
    "Your answer: 117\n",
    "Correct! You've gotten 3 correct in a row.\n",
    "Congratulations! You mastered addition.\n",
    "\n",
    "\n",
    "If you hit \"Mark and Submit\" the computer will test if you implemented this extension correctly.\n",
    "\n",
    "As a side note, one of the earliest programs Mehran wrote (with his friend Matthew) when he was first learning how to program was very similar to Khansole Academy. It was called “M&M’s Math Puzzles.” It was written in a language named BASIC on a computer that had 4K of memory (that’s 4 Kilobytes) and used cassette tapes (the same kind used for music in the 1970’s) to store information. Yeah, Mehran is old.\n",
    "\n",
    "Beyond addition?\n",
    "\n",
    "There is no limit to how awesome you can make your learning software. Can you get it to teach? Can you get it to offer problems other than addition? Get creative! Have fun! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What is 77 + 43?\n",
      "Your answer: 99\n",
      "Incorrect. The expected answer is 120\n",
      "What is 94 + 45?\n",
      "Your answer: 99\n",
      "Incorrect. The expected answer is 139\n",
      "What is 65 + 63?\n",
      "Your answer: 99\n",
      "Incorrect. The expected answer is 128\n",
      "What is 81 + 88?\n",
      "Your answer: 161\n",
      "Incorrect. The expected answer is 169\n",
      "What is 64 + 5?\n",
      "Your answer: 69\n",
      "Correct! You've gotten 1 correct in a row.\n",
      "What is 77 + 60?\n",
      "Your answer: 137\n",
      "Correct! You've gotten 2 correct in a row.\n",
      "What is 32 + 94?\n",
      "Your answer: 126\n",
      "Correct! You've gotten 3 correct in a row.\n",
      "Congratulations! You mastered addition.\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "\n",
    "def main():\n",
    "    attempt = 0\n",
    "    success = 3\n",
    "    while attempt != success:\n",
    "        X = random.randint(0,100)\n",
    "        Y = random.randint(0,100)\n",
    "        Z = X + Y\n",
    "        print(\"What is \"+str(X)+\" + \"+str(Y)+\"?\")\n",
    "        ans = int(input(\"Your answer: \"))\n",
    "        if ans == Z:\n",
    "            attempt = attempt + 1\n",
    "            if attempt == success:\n",
    "                print(\"Correct! You've gotten 3 correct in a row.\")\n",
    "                print(\"Congratulations! You mastered addition.\")\n",
    "            else:\n",
    "                print(\"Correct! You've gotten \"+str(attempt)+\" correct in a row.\")\n",
    "        else:\n",
    "            print(\"Incorrect. The expected answer is \"+str(Z))\n",
    "            attempt = 0\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Ancient Game of Nimm\n",
    "\n",
    "Tip! First work on breaking down the problem into small parts, and solving each of the milestones.\n",
    "\n",
    "Once you're ready to submit, click the Run button to make sure you code works, and then click Submit.\n",
    "\n",
    "Nimm is an ancient game of strategy that is named after the old German word for \"take.\" It is also called Tiouk Tiouk in West Africa and Tsynshidzi in China. Players alternate taking stones until there are zero left.\n",
    "\n",
    "The game of Nimm goes as follows:\n",
    "\n",
    "The game starts with a pile of 20 stones between the players.\n",
    "The two players alternate turns.\n",
    "On a given turn, a player may take either 1 or 2 stone from the center pile.\n",
    "The two players continue until the center pile has run out of stones.\n",
    "The last player to take a stone loses. Here's a sample execution:\n",
    "\n",
    "There are 20 stones left\n",
    "Player 1 would you like to remove 1 or 2 stones? 2\n",
    "\n",
    "There are 18 stones left\n",
    "Player 2 would you like to remove 1 or 2 stones? 2\n",
    "\n",
    "There are 16 stones left\n",
    "Player 1 would you like to remove 1 or 2 stones? 1\n",
    "\n",
    "There are 15 stones left\n",
    "Player 2 would you like to remove 1 or 2 stones? 2\n",
    "\n",
    "There are 13 stones left\n",
    "Player 1 would you like to remove 1 or 2 stones? 2\n",
    "\n",
    "There are 11 stones left\n",
    "Player 2 would you like to remove 1 or 2 stones? 1\n",
    "\n",
    "There are 10 stones left\n",
    "Player 1 would you like to remove 1 or 2 stones? 2\n",
    "\n",
    "There are 8 stones left\n",
    "Player 2 would you like to remove 1 or 2 stones? -1\n",
    "Please enter 1 or 2: 2\n",
    "\n",
    "There are 6 stones left\n",
    "Player 1 would you like to remove 1 or 2 stones? 2\n",
    "\n",
    "There are 4 stones left\n",
    "Player 2 would you like to remove 1 or 2 stones? 2\n",
    "\n",
    "There are 2 stones left\n",
    "Player 1 would you like to remove 1 or 2 stones? 1\n",
    "\n",
    "There are 1 stones left\n",
    "Player 2 would you like to remove 1 or 2 stones? 1\n",
    "\n",
    "Player 1 wins!\n",
    " Expand (38 lines) \n",
    "Write a program to play Nimm. To make your life easier we have broken the problem down into smaller milestones. You have a lot of time for this program. Take it slowly, piece by piece.\n",
    "\n",
    "Milestone 1\n",
    "\n",
    "Start with 20 stones. Repeat the process of removing stones and printing out how many stones are left until there are zero. Don't worry about whose turn it is. Don't worry about making sure only one or two stones are removed. Use the method input(msg) which prints msg and waits for the user to enter an input. Make sure to convert the input into an int.\n",
    "\n",
    "There are 20 stones left\n",
    "Would you like to remove 1 or 2 stones? 2\n",
    "\n",
    "There are 18 stones left\n",
    "Would you like to remove 1 or 2 stones? 17\n",
    "\n",
    "There are 1 stones left\n",
    "Would you like to remove 1 or 2 stones? 3\n",
    "\n",
    "Game over\n",
    "\n",
    "\n",
    "Milestone 2\n",
    "\n",
    "Create a variable of type int to keep track of whose turn it is (remember there are two players). Tell the user whose turn it is. Each time someone picks up stones, change the player number.\n",
    "\n",
    "There are 20 stones left\n",
    "Player 1 would you like to remove 1 or 2 stones? 1\n",
    "\n",
    "There are 19 stones left\n",
    "Player 2 would you like to remove 1 or 2 stones? 1\n",
    "\n",
    "There are 18 stones left\n",
    "Player 1 would you like to remove 1 or 2 stones? 17\n",
    "\n",
    "There are 1 stones left\n",
    "Player 2 would you like to remove 1 or 2 stones? 1\n",
    "\n",
    "Game over\n",
    "\n",
    "\n",
    "Milestone 3\n",
    "\n",
    "Make sure that each turn only one or two stones are removed. After you read a number of stones to remove from a user (their input), you can use the following pattern to check if it was valid and keep asking until it is valid.\n",
    "\n",
    "while inputisinvalid:\n",
    "    amount = int(input(\"Please enter 1 or 2: \"))\n",
    "As a final touch, announce the winner after the game is over."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 20 stones left\n",
      "Player 1 would you like to remove 1 or 2 stones? 2\n",
      "\n",
      "There are 18 stones left\n",
      "Player 2 would you like to remove 1 or 2 stones? 2\n",
      "\n",
      "There are 16 stones left\n",
      "Player 1 would you like to remove 1 or 2 stones? 2\n",
      "\n",
      "There are 14 stones left\n",
      "Player 2 would you like to remove 1 or 2 stones? 2\n",
      "\n",
      "There are 12 stones left\n",
      "Player 1 would you like to remove 1 or 2 stones? 2\n",
      "\n",
      "There are 10 stones left\n",
      "Player 2 would you like to remove 1 or 2 stones? 2\n",
      "\n",
      "There are 8 stones left\n",
      "Player 1 would you like to remove 1 or 2 stones? 2\n",
      "\n",
      "There are 6 stones left\n",
      "Player 2 would you like to remove 1 or 2 stones? 2\n",
      "\n",
      "There are 4 stones left\n",
      "Player 1 would you like to remove 1 or 2 stones? 2\n",
      "\n",
      "There are 2 stones left\n",
      "Player 2 would you like to remove 1 or 2 stones? 2\n",
      "\n",
      "Player 1 wins!\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def main():\n",
    "    players = 0 \n",
    "    start_with_stones = 20 \n",
    "    while (start_with_stones > 0): \n",
    "        player_number = 0 \n",
    "        if (players % 2 == 0): #even means Player 1, odd means Player 2\n",
    "            player_number = player_number + 1\n",
    "        else: \n",
    "            player_number = player_number + 2\n",
    "        print(\"There are \" + str(start_with_stones) + \" stones left\")\n",
    "        user_choice = input(\"Player \" + str(player_number) + \" would you like to remove 1 or 2 stones? \")\n",
    "        user_choice = int(user_choice)\n",
    "        while (user_choice > 2) or (user_choice < 0) or (user_choice == 0): \n",
    "            user_choice = input(\"Please enter 1 or 2: \") \n",
    "            user_choice = int(user_choice)\n",
    "        if(start_with_stones !=1): \n",
    "            start_with_stones = start_with_stones - user_choice\n",
    "            print(\"\")\n",
    "            players = players + 1\n",
    "        else: \n",
    "            start_with_stones = start_with_stones - user_choice \n",
    "            print(\"Game over\")\n",
    "    if(player_number == 1): \n",
    "        print(\"Player 2 wins!\")\n",
    "    else:\n",
    "        print(\"Player 1 wins!\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Extension\n",
    "\n",
    "Since extensions are open ended and may consist of different files, we use the Terminal instead here.\n",
    "\n",
    "To run your extensions, type python file.py into the Terminal, where file.py could be nimm2.py etc.\n",
    "\n",
    "You can also press the up and down arrow keys in the Terminal to cycle through recent commands.\n",
    "\n",
    "There are no test cases, so Submit when you're ready.\n",
    "\n",
    "Optional Extensions\n",
    "\n",
    "Once you’ve completed all the required parts of the assignment, you might want to consider adding some extensions. Extensions, you may recall, are things that are totally optional. Here are some extra programs to write if you are interested – but feel free to just make something cool!\n",
    "\n",
    "Extend Khansole Academy\n",
    "\n",
    "You could consider extending your Khansole Academy program to, for example, add more problem types (subtraction, multiplication, division, and more). You could also consider problems beyond arithmetic. If you could build your own version of Khansole Academy, what would you use it to help people learn? Be creative and enjoy.\n",
    "\n",
    "AI for Game of Nimm\n",
    "\n",
    "Can you make a computer player that can always win in a game of Nimm?\n",
    "\n",
    "Hailstones\n",
    "\n",
    "A separate (optional) problem you could consider writing is based on a problem in Douglas Hofstadter’s Pulitzer-prize-winning book Gödel, Escher, Bach. That book contains many interesting mathematical puzzles, many of which can be expressed in the form of computer programs. In Chapter XII, Hofstadter mentions a wonderful problem that is well within the scope of what you know. The problem can be expressed as follows:\n",
    "\n",
    "Pick some positive integer and call it n.\n",
    "If n is even, divide it by two.\n",
    "If n is odd, multiply it by three and add one.\n",
    "Continue this process until n is equal to one.\n",
    "On page 401 of the Vintage edition of his book, Hofstadter illustrates this process with the following example, starting with the number 15:\n",
    "\n",
    "15 is odd, so I make 3n+1: 46\n",
    "46 is even, so I take half: 23\n",
    "23 is odd, so I make 3n+1: 70\n",
    "70 is even, so I take half: 35\n",
    "35 is odd, so I make 3n+1: 106\n",
    "106 is even, so I take half: 53\n",
    "53 is odd, so I make 3n+1: 160\n",
    "160 is even, so I take half: 80\n",
    "80 is even, so I take half: 40\n",
    "40 is even, so I take half: 20\n",
    "20 is even, so I take half: 10\n",
    "10 is even, so I take half: 5\n",
    "5 is odd, so I make 3n+1: 16\n",
    "16 is even, so I take half: 8\n",
    "8 is even, so I take half: 4\n",
    "4 is even, so I take half: 2\n",
    "2 is even, so I take half: 1\n",
    "\n",
    "\n",
    "As you can see from this example, the numbers go up and down, but eventually—at least for all numbers that have ever been tried—comes down to end in 1. In some respects, this process is reminiscent of the formation of hailstones, which get carried upward by the winds over and over again before they finally descend to the ground. Because of this analogy, this sequence of numbers is usually called the Hailstone sequence, although it goes by many other names as well.\n",
    "\n",
    "You might want to write a Python program that reads in a number from the user and then displays the Hailstone sequence for that number, just as in Hofstadter’s book, followed by a line showing the number of steps taken to reach 1. For example, here’s a sample run of what such a program might look like (user input is in bold italics):\n",
    "\n",
    "Enter a number: 17\n",
    "17 is odd, so I make 3n + 1: 52\n",
    "52 is even, so I take half: 26\n",
    "26 is even, so I take half: 13\n",
    "13 is odd, so I make 3n + 1: 40\n",
    "40 is even, so I take half: 20\n",
    "20 is even, so I take half: 10\n",
    "10 is even, so I take half: 5\n",
    "5 is odd, so I make 3n + 1: 16\n",
    "16 is even, so I take half: 8\n",
    "8 is even, so I take half: 4\n",
    "4 is even, so I take half: 2\n",
    "2 is even, so I take half: 1\n",
    "The process took 12 steps to reach 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a Number: 40\n",
      "40 is even,so I take half: 20\n",
      "20 is even,so I take half: 10\n",
      "10 is even,so I take half: 5\n",
      "5 is odd,so I make 3n+1 :16\n",
      "16 is even,so I take half: 8\n",
      "8 is even,so I take half: 4\n",
      "4 is even,so I take half: 2\n",
      "2 is even,so I take half: 1\n",
      "It tooke me 8 steps to complete\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    n =int(input(\"Enter a Number: \"))\n",
    "    process = 0\n",
    "    while True:\n",
    "        process +=1\n",
    "        even = is_num_even(n)\n",
    "        if even:\n",
    "            x = int(n/2)\n",
    "            print(str(n)+\" is even,so I take half: \"+ str(x))\n",
    "        odd = is_num_odd(n)\n",
    "        if odd:\n",
    "            x = 3*n + 1\n",
    "            print(str(n)+ \" is odd,so I make 3n+1 :\"+str(x))\n",
    "        n = x\n",
    "        if n==1:\n",
    "            print(\"It tooke me \" + str(process)+\" steps to complete\")\n",
    "            break\n",
    "\n",
    "def is_num_even(n):\n",
    "    if n%2==0:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "def is_num_odd(n):\n",
    "    if n%2!= 0:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
